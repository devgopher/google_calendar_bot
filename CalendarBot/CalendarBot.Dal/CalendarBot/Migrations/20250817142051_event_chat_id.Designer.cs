// <auto-generated />
using System;
using CalendarBot.Dal.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CalendarBot.Migrations
{
    [DbContext(typeof(CalendarBotDbContext))]
    [Migration("20250817142051_event_chat_id")]
    partial class event_chat_id
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CalendarBot.Dal.Database.Entities.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string[]>("Attendees")
                        .HasColumnType("text[]");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CalendarBot.Dal.Database.Entities.GoogleTokens", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("AccessTokenDtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("AccessTokenExpirationUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("RefreshTokenDtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("ChatId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("CalendarBot.Dal.Database.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("TimeBefore")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("CalendarBot.Dal.Database.Entities.Reminder", b =>
                {
                    b.HasOne("CalendarBot.Dal.Database.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });
#pragma warning restore 612, 618
        }
    }
}
